// This file is auto-generated by Unity.
// To regenerate, open Unity and choose Spatial > Regenerate TypeScript Interface.
export interface AppState {
  startupMessage: StartupMessage
  updateAvailabilityStatus: AppUpdateAvailability
  appFlags: AppFlags
  platform: Platform
  bootStatus: AppBootStatus
  spatialUID: string
  appSessionID: string
  appSessionNumber: number
  commitSHA: string
  clientVersion: string
  clientVersionChannel: string
  debug: DebugSettings
  sapiOrigin: string
  swagOrigin: string
  sapiStatus: SAPIStatus
  internetReachable: boolean
  showRatePopup: boolean
  perfStatistics: PerfStatisticsState
  avatarSDK: AvatarSDKState
  userSessionNumber: number
  authToken: string
  isAuthless: boolean
  loginCode: string
  loginCodeSecret: string
  loginStatus: LoginStatus
  activeLoginMethod: LoginMethod
  isLoggedIn: boolean
  loginStatusMsg: string
  promptAuthlessUserToLogin: boolean
  loginHistoryUsers: { [key: string]: LoginHistoryUser }
  bootstrapTreatments: BootstrapTreatmentsState
  featureFlags: FeatureFlagsState
  userProfile: UserProfile
  userContent: UserContentState
  contentMetaDataCache: { [key: string]: ContentMetaDataState }
  itemMetadataCache: { [key: string]: ItemMetadataState }
  rooms: { [key: string]: RoomData }
  isLoadingRooms: boolean
  localAvatar: LocalAvatarViewState
  roomsMenu: RoomsMenuState
  templates: TemplateState[]
  toastSystem: ToastSystemState
  popupSystem: PopupMessageSystemState
  tutorial: InstaTutorialState
  roomSession: RoomSessionState
  suppressLobbyAutoJoin: boolean
  locationData: LocationDataState
  rtc: RTCState
  cast: CastState
  environment: VREnvironmentState
  speechCaptionConfig: SpeechCaptionConfigState
  microphone: MicrophoneState
  isTurnMenuOpen: boolean
  introStatus: AppIntroStatus
  screenOrientation: ScreenOrientation
  isLandscapeScreenOrientation: boolean
  cameraViewport: CameraViewportState
  targetFrameRate: number
  cameraPixelRatio: number
  useAutoCameraPixelRatio: boolean
  minAutoCameraPixelRatio: number
  maxAutoCameraPixelRatio: number
  vSyncCount: number
  antiAliasing: number
  windowHasFocus: boolean
  windowIsVisible: boolean
  hasUsedMouseOrKeyboard: boolean
  isMouseInUnity: boolean
}

export interface StartupMessage {
  message: string
  forceExit: boolean
}

export interface AppFlags {}

export interface DebugSettings {
  logLevel: LogLevel
  logChannelFlags: LogChannel
  remoteLogLevel: LogLevel
  remoteLogChannelFlags: LogChannel
  overlayStatsMode: DebugSettings_OverlayStatsMode
  menuVisible: boolean
  debugConsoleVisible: boolean
  allowMultipleWebBrowsers: boolean
  fpsThrottleMs: number
}

export enum LogLevel {
  None = 0,
  Error = 1,
  Warning = 2,
  Info = 3,
  Debug = 4,
  Trace = 5,
}

export enum LogChannel {
  None = 0,
  Default = 1,
  AppActionScheduler = 2,
  AppStateObservationContext = 4,
  AppCommandScheduler = 8,
  NetworkingLayerAndPhoton = 16,
  CommandLib = 32,
  SpatialAPI = 64,
  RoomConnection = 128,
  Input = 256,
  ARSession = 512,
  Avatars = 1024,
  MuteAndVisibility = 2048,
  ContentLoader = 4096,
  Translation = 8192,
  WebRequests = 16384,
  LiveSwitch = 32768,
  ThoughtFlow = 65536,
  RTC = 131072,
  Persistence = 262144,
  Analytics = 524288,
  Voice = 1048576,
  PrefabPool = 2097152,
  SceneViewManager = 4194304,
  UncaughtExceptions = 8388608,
  ReactBridge = 16777216,
  Microphone = 33554432,
  ToolkitInternal = 67108864,
  ToolkitExternal = 134217728,
}

export enum DebugSettings_OverlayStatsMode {
  None = 0,
  Full = 1,
  FPSOnly = 2,
}

export interface PerfStatisticsState {
  fpsCount: number
  droppedFrameCount: number
  systemMemorySize: number
  graphicsMemorySize: number
  triangleCount: number
  vertexCount: number
  systemMemoryUsage: number
  graphicsMemoryUsage: number
}

export interface AvatarSDKState {
  accessToken: string
  tokenType: string
}

export interface LoginHistoryUser {
  userID: string
  displayName: string
  email: string
  profilePicURL: string
  authToken: string
  lastLoginDate: string
}

export interface BootstrapTreatmentsState {
  forceAuthlessUserToLogin: boolean
  promptAuthlessUserToLoginOnStart: boolean
  useOVRLayersOnQuest: boolean
}

export interface FeatureFlagsState {
  currentKey: string
  loadedKey: string
  isLoaded: boolean
  isFetching: boolean
  isStale: boolean
  backpack: boolean
  firstQuestSpacePath: string
  liveExploreV2: boolean
  showBadgesOnUserProfile: boolean
}

export interface UserProfile {
  userID: string
  displayName: string
  email: string
  profilePicURL: string
  blockedUsers: string[]
  myOrganization: OrganizationState
  organizations: string[]
  avatar: UserProfileAvatarState
  appearanceCustomization: AppearanceCustomizationState
  integrations: { [key: number]: IntegrationState }
  walletAddresses: { [key: number]: string }
  permissions: string[]
  acknowledgedInAppNotificationKeys: string[]
  config: UserConfig
  preferences: UserPreferences
  accountCompletionStatus: string
  acceptedStandardTerms: boolean
  acceptedSept2022StandardTerms: boolean
  showEarlyAccessTerms: boolean
  acceptedEarlyAccessTerms: boolean
  acceptedPrivacyPolicy: boolean
  acceptedSept2022PrivacyPolicy: boolean
  isOnboardingRequired: boolean
  subscription: UserSubscription
  socialProfile: SocialProfileState
  followers: string[]
  followings: string[]
  editProfileResponseStatus: UserProfile_EditProfileStatus
  editProfileResponseError: UserProfile_EditProfileResponseError
}

export interface OrganizationState {
  id: string
  name: string
}

export interface UserProfileAvatarState {
  avatarUserID: string
  id: string
  body: string
  skinColorOverride: [number, number, number, number]
  shirtColorOverride: [number, number, number, number]
  readyPlayerMeUrl: string
  readyPlayerMeThumbnails: UserProfileAvatarState_ReadyPlayerMeThumbnailsState
  activeAvatarStyle: UserAvatarStyle
  attachmentItemIDs: string[]
  attachments: { [key: number]: AvatarAttachmentState }
  finalBody: string
  finalAvatarSDKID: string
  finalSkinColorOverride: [number, number, number, number]
  finalShirtColorOverride: [number, number, number, number]
}

export interface UserProfileAvatarState_ReadyPlayerMeThumbnailsState {
  upperBody: string
  lowerBody: string
}

export interface AvatarAttachmentState {
  url: string
  isPreviewing: boolean
  order: number
  additionalSlots: SpatialAvatarAttachment_SlotMask
  overridesAvatarAnimations: boolean
  overridesLeftHandIK: boolean
  overridesRightHandIK: boolean
  overridesLeftFootIK: boolean
  overridesRightFootIK: boolean
}

export enum SpatialAvatarAttachment_SlotMask {
  None = 0,
  Aura = 1,
  LeftHand = 2,
  RightHand = 4,
  Feet = 8,
}

export enum UserAvatarStyle {
  Realistic = 0,
  ReadyPlayerMe = 1,
  RealisticRpmHybrid = 2,
  CreatorToolkitAvatar = 3,
}

export enum SpatialAvatarAttachment_Slot {
  None = 0,
  Aura = 1,
  LeftHand = 2,
  RightHand = 3,
  Feet = 4,
}

export interface AppearanceCustomizationState {
  profileColor: string
}

export interface IntegrationState {
  isActive: boolean
  visibilityPreference: VisibilityPreference
}

export enum VisibilityPreference {
  None = 0,
  AlwaysShow = 1,
  AlwaysHide = 2,
}

export interface UserConfig {
  treatments: UserConfig_Treatments
  photonConfigs: UserConfig_PhotonConfig[]
  activePhotonConfigIndex: number
  photonVoiceConfigs: UserConfig_PhotonConfig[]
  activePhotonVoiceConfigIndex: number
  liveSwitch: UserConfig_LiveSwitchConfig
}

export interface UserConfig_Treatments {
  debugMenu: boolean
  fullSettingsMenu: boolean
  meshColliderVertexLimit: number
  remoteUnityLogLevel: LogLevel
  availableIntegrations: IntegrationType[]
  unlimitedFileSize: boolean
  autosaveDelay: number
  showMobileStoreReviewInApp: boolean
  nftAddressOverride: string
  maxAllowedRoomParticipants: number
  maxImageSize: number
  maxTextureSize: number
  useCompressedModelsV1: boolean
  progressiveModelLoading: ModelResolutionMode
  progressiveModelLoadingEnvironment: ModelResolutionMode
  customEnvBlocksLowerPriorityLoaders: boolean
  useModelCollidersOnBoneTransform: boolean
  maxTextureSizeSkybox: number
  maxTextureSizeCustomEnv: number
  autoPixelRatioOnlyClampsDimensions: boolean
  autoPixelRatioMaxDimension: number
  videoPlayerPlugin: VideoPlayerPlugin
  hlsMinVideoLength: number
  youTube: boolean
  avProExcludedRoomIDs: string[]
  voiceProvider: VoiceProvider
  liveSwitchEnabledRoomIDs: string[]
  avatarRTCFeedOpenDistance: number
  oculusSubscriptions: boolean
  userTeleportHostTool: boolean
  sendUsersToSeatsHostTool: boolean
  bringUsersToMeHostTool: boolean
  privateLobbyPresetContent: string
  recordReactBridgeTraces: boolean
  authlessPrivateLobbyFeatures: string[]
  thumbnailCaptureRoomContentLoadTimeout: number
  minAudioTimeSyncThreshold: number
  minVideoTimeSyncThreshold: number
  unthrottleContentLoadingWebGL: boolean
  unthrottledGLTFastFrameBudgetWebGL: number
  unthrottledGLTFastFrameBudgetHighPriorityWebGL: number
  unthrottledMaxActiveLoadersWebGL: number
  unthrottledLoaderIntervalWebGL: number
  animatedModelResizeBakingEnabled: boolean
  hardcodedRespawnLogicRoomIDs: string[]
  localPhotonDebugLogs: boolean
  readyPlayerMeDefaultBodies: string[]
  readyPlayerMeDefaultBodyMale: string
  readyPlayerMeDefaultBodyFemale: string
  voiceLocationGroupingMethod: VoiceLocationGroupingMethod
  hideInfoPanelSquaredDistance: number
  photonPluginType: string
  mediaViewDebug: boolean
  photonVoiceSamplingRateOverride: number
  photonVoiceBitrateOverride: number
  customReflectionEnabled: boolean
  customReflectionEnabledRoomIDs: string[]
  customReflectionDisabledRoomIDs: string[]
  maxLoadersToAddPerFrame: number
  hyperlinksV2: boolean
  objectInspectorDebug: boolean
  emotesEnabled: boolean
  audioPlayerEnabled: boolean
  showSyncedLocalAvatar: boolean
  mobileJoystickEnabled: boolean
  hmdContinousMovementEnabled: boolean
  hmdTunnelingVignetteEnabled: boolean
  mobilePortraitJoystickEnabled: boolean
  isModifiedCharacterControllerEnabled: boolean
  isModifiedCameraControllerEnabled: boolean
  spaceContentLoadOrder: SpaceContentLoadOrder
}

export enum IntegrationType {
  None = 0,
  Demos = 1,
  Stuff = 2,
  GoogleDrive = 3,
  Microsoft = 4,
  Ethereum = 5,
  ScreenShare = 6,
  Templates = 7,
  Sketchfab = 8,
  Length = 9,
}

export enum ModelResolutionMode {
  Full = 0,
  LowResThenFull = 1,
  LowResThenHighResTexture = 2,
  FullUncompressed = 3,
}

export enum VideoPlayerPlugin {
  Unity = 0,
  AVPro = 1,
}

export enum VoiceProvider {
  None = 0,
  Photon = 1,
  LiveSwitch = 2,
}

export enum VoiceLocationGroupingMethod {
  GroupByUserID = 0,
  GroupByLocation = 1,
  GroupEveryoneSeparately = 2,
}

export enum SpaceContentLoadOrder {
  Default = 0,
  SpaceAndPhotonFirst = 1,
}

export interface UserConfig_PhotonConfig {
  id: string
  hostingType: UserConfig_HostingOption
  protocol: ConnectionProtocol
  nameServerPortOverride: number
  masterServerPortOverride: number
  gameServerPortOverride: number
  appID: string
  nameserverURL: string
  ip: string
}

export enum UserConfig_HostingOption {
  NotSet = 0,
  PhotonCloud = 1,
  SelfHosted = 2,
  BestRegion = 3,
}

export enum ConnectionProtocol {
  Udp = 0,
  Tcp = 1,
  WebSocket = 4,
  WebSocketSecure = 5,
}

export interface UserConfig_LiveSwitchConfig {
  url: string
  appID: string
}

export interface UserPreferences {
  stickyNoteColor: [number, number, number, number]
  whiteboardBrushColor: [number, number, number, number]
  whiteboardBrushSize: number
  isLeftHanded: boolean
  scribbleBrushColor: [number, number, number, number]
  scribbleBrushSize: number
  searchMode: UserPreferences_SearchMode
  hmdLocomotionMode: UserPreferences_HMDLocomotionMode
}

export enum UserPreferences_SearchMode {
  Keyboard = 0,
  Dictation = 1,
}

export enum UserPreferences_HMDLocomotionMode {
  Teleport = 0,
  ContinuousMove = 1,
}

export interface UserSubscription {
  subscriptionType: UserSubscription_SubscriptionType
  subscriptionSource: UserSubscription_SubscriptionSource
  isActive: boolean
}

export enum UserSubscription_SubscriptionType {
  Enterprise = 0,
  Team_Pro = 1,
  Personal_Pro = 2,
  Pro_Override = 3,
  None = 4,
}

export enum UserSubscription_SubscriptionSource {
  Stripe = 0,
  Oculus = 1,
  None = 2,
  Apple = 3,
}

export interface SocialProfileState {
  displayName: string
  about: string
  username: string
  url: string
  profilePictureURL: string
  bannerSpaceID: string
  bannerURL: string
  usernameTwitter: string
  usernameInstagram: string
  usernameOpensea: string
  usernameDiscord: string
  usernameLinkedin: string
  usernameTiktok: string
  usernameFacebook: string
  linkWebsite: string
  numFollowers: number
  numFollowing: number
  numSpaces: number
  appearanceCustomization: AppearanceCustomizationState
  isPrivate: boolean
  linkTwitter: string
  linkInstagram: string
  linkOpensea: string
  linkDiscord: string
  linkLinkedin: string
  linkTiktok: string
  linkFacebook: string
}

export interface UserProfile_EditProfileResponseError {
  field: string
  message: string
  code: string
  statusCode: number
  error: string
}

export enum WalletType {
  OpenSea = 0,
}

export enum UserProfile_EditProfileStatus {
  Idle = 0,
  Pending = 1,
  Complete = 2,
  Failed = 3,
}

export interface UserContentState {
  contentByID: { [key: string]: UserContentItemData }
  contentByQuery: { [key: string]: UserContentQueryResultState }
}

export interface UserContentItemData {
  ownerID: string
  name: string
  creator: string
  contentType: UserContentType
  contentSourceType: UserContentSourceType
  mimeType: string
  thumbnail: string
}

export enum UserContentType {
  Unknown = 0,
  Audio = 1,
  Video = 2,
  Image = 3,
  GIF = 4,
  Model = 5,
  Document = 6,
  RoomTemplate = 7,
  NotSupported = 8,
  RemoteAsset = 9,
  Environment = 10,
  CreatorToolkitPrefab = 11,
}

export enum UserContentSourceType {
  Unknown = 0,
  GoogleDrive = 1,
  MicrosoftGraph = 2,
  DirectUpload = 3,
  RemoteAsset = 4,
  OpenSeaAsset = 5,
  SearchRequest = 6,
  SpatialPhoto = 7,
  MagicEdenAsset = 8,
  SketchfabAsset = 9,
  UnityPackage = 10,
}

export interface UserContentQueryResultState {
  lastFetchTime: string
  contentIDs: string[]
}

export interface ContentMetaDataState {
  lastCacheTime: string
  creatorID: string
  name: string
  url: string
  thumbnail: string
  mimeType: string
  contentSourceType: UserContentSourceType
  putUrl: string
  putUrlExpirationDate: string
  numPages: number
  width: number
  height: number
  duration: number
  hlsUrl: string
  modelCompressedUrl: string
  modelLowResUrl: string
  modelTexturesOnlyUrl: string
  nft: NFTContentMetaDataState
}

export interface NFTContentMetaDataState {
  creatorID: string
  ownerID: string
  priceData: NFTContentMetaDataState_PriceDataState
  description: string
  collection: string
  externalLink: string
  marketplace: string
}

export interface NFTContentMetaDataState_PriceDataState {
  price: number
  currency: NFTContentMetaDataState_PriceDataState_Currency
  saleType: NFTContentMetaDataState_PriceDataState_SaleType
  priceLabel: string
}

export enum NFTContentMetaDataState_PriceDataState_Currency {
  ETH = 0,
  WETH = 1,
  SOL = 2,
}

export enum NFTContentMetaDataState_PriceDataState_SaleType {
  BuyNow = 0,
  Auction = 1,
  NotListedForSale = 2,
}

export interface ItemMetadataState {
  lastCacheTime: string
  name: string
  description: string
  worldID: string
  worldName: string
  creatorID: string
  type: ItemType
  assetSKU: string
  scope: ItemScope
  consumable: boolean
  consumableDuration: number
  consumableCooldown: number
  stackable: boolean
  published: boolean
  shopListed: boolean
  thumbnailURL: string
  assetDownloadURL: string
  assetMetadata: AssetMetadataState
  hasWorldPrice: boolean
  worldPrice: WorldPriceState
}

export interface AssetMetadataState {
  avatarAttachment: AvatarAttachmentPackageMetadataState
}

export interface AvatarAttachmentPackageMetadataState {
  primarySlot: SpatialAvatarAttachment_Slot
  additionalSlots: SpatialAvatarAttachment_SlotMask
  category: SpatialAvatarAttachment_Category
  hasOverrideAvatarAnimations: boolean
}

export enum SpatialAvatarAttachment_Category {
  Unspecified = 0,
  Aura = 1,
  Weapon = 2,
  Rideable = 3,
}

export interface WorldPriceState {
  currencyID: string
  currencyName: string
  customThumbnailURL: string
  price: number
  quantity: number
}

export enum ItemType {
  Avatar = 0,
  Emote = 1,
  AvatarAttachment = 2,
  Currency = 3,
  PrefabObject = 4,
  Generic = 5,
}

export enum ItemScope {
  World = 0,
  Universal = 1,
}

export interface RoomData {
  id: string
  ownerID: string
  ownerName: string
  name: string
  slug: string
  description: string
  tags: string[]
  active: boolean
  organizationOwnerID: string
  organizationOwnerName: string
  organizations: string[]
  shareSetting: RoomData_ShareSetting
  publicLink: boolean
  isSandbox: boolean
  isCreatorToolkitSpace: boolean
  packageSKU: string
  shareID: string
  thumbnails: string[]
  participants: { [key: string]: RoomParticipantUserData }
  directlyInvitedGuests: { [key: string]: InvitedGuestUserData }
  version: number
  commitSHA: string
  clientVersion: string
  clientVersionChannel: string
  starred: boolean
  administrators: string[]
  restrictedPermissions: AdministratorPermission[]
  sortPriority: number
  excludeFromMenus: boolean
  accessible: boolean
  transientThumbnailGetUrl: string
  persistentThumbnailGetUrl: string
  cubemapGetUrl: string
  customThumbnailGetUrl: string
  thumbnail: string
  thumbnailsExpireAt: number
  roomCategories: SpatialAPI_Room_RoomCategories
  lobbyType: LobbyType
  tileSize: RoomData_RoomTileSize
  isInstanceable: boolean
  isNFTSpace: boolean
  visitCount: number
  loveCount: number
  isLoved: boolean
  isLive: boolean
  lastLiveUnixMillis: number
  isPublishedToExplore: boolean
  worldID: string
}

export interface RoomParticipantUserData {
  userID: string
  displayName: string
  color: [number, number, number, number]
  permissions: string[]
  profilePicURL: string
  appearanceCustomization: AppearanceCustomizationState
}

export interface InvitedGuestUserData {
  userID: string
  displayName: string
  email: string
  profilePicURL: string
  color: [number, number, number, number]
  playerColor: string
  accountCompletionStatus: SpatialAPI_AccountCompletionStatus
}

export enum SpatialAPI_AccountCompletionStatus {
  NONE = 0,
  INVITED = 1,
  ONBOARDING = 2,
  COMPLETE = 3,
}

export enum RoomData_ShareSetting {
  None = 0,
  Organization = 1,
  PublicLink = 2,
  Private = 3,
}

export enum AdministratorPermission {
  None = 0,
  AddContent = 1,
  DownloadContent = 2,
  EditAdminContent = 3,
  ChangeEnvironment = 4,
  SaveRoom = 5,
  ClearRoom = 6,
  UserTeleport = 7,
  RestrictOthersViewOnly = 8,
  MuteAnyone = 9,
  NoAutoplay = 10,
  ParticipantChatDisabled = 11,
}

export enum SpatialAPI_Room_RoomCategories {
  None = 0,
  Batch = 1,
  Lobby = 2,
  Org = 4,
  Personal = 8,
  Explore = 16,
  Search = 32,
}

export enum LobbyType {
  None = 0,
  PrivateLobby = 1,
  PublicLobby = 2,
}

export enum RoomData_RoomTileSize {
  Default = 0,
  Large = 1,
}

export interface LocalAvatarViewState {
  isPreviewing: boolean
  avatarStyle: UserAvatarStyle
  body: string
  avatarSDKAvatarID: string
  skinColorOverride: [number, number, number, number]
  shirtColorOverride: [number, number, number, number]
  attachmentURLs: string[]
  attachmentItemIDs: string[]
  attachments: { [key: number]: AvatarAttachmentState }
}

export interface RoomsMenuState {
  mode: RoomsMenuMode
  roomCategory: RoomsMenuCategory
  roomSearchText: string
}

export enum RoomsMenuMode {
  Closed = 0,
  SelectRoom = 1,
  CreateNewRoom = 2,
}

export enum RoomsMenuCategory {
  Spaces = 0,
  Explore = 1,
  Team = 2,
  Search = 3,
}

export interface TemplateState {
  name: string
  id: string
  thumbnail: string
}

export interface ToastSystemState {
  maxToastCount: number
  toasts: { [key: number]: ToastState }
}

export interface ToastState {
  id: number
  messages: string[]
  category: ToastCategory
  showEllipsis: boolean
}

export enum ToastCategory {
  None = 0,
  App = 1,
  InRoomOnly = 2,
}

export interface PopupMessageSystemState {
  groupIDCounter: number
  popupIDCounter: number
  currentGroupID: number
  currentPopupID: number
  messageGroups: { [key: number]: PopupMessageGroupState }
}

export interface PopupMessageGroupState {
  id: number
  category: PopupMessageCategory
  messages: { [key: number]: PopupMessageState }
}

export interface PopupMessageState {
  id: number
  tag: string
  message: string
  contentURL: string
}

export enum PopupMessageCategory {
  None = 0,
  App = 1,
  InRoomOnly = 2,
  All = 3,
}

export interface InstaTutorialState {
  status: InstaTutorialState_Status
  isConciseMode: boolean
  disableUserTeleport: boolean
  disableUserDock: boolean
}

export enum InstaTutorialState_Status {
  TutorialNotRequired = 0,
  TutorialRequired = 1,
  MoveTutorial = 2,
  UseMenuTutorial = 3,
  NearInteractTutorial = 4,
  DistantInteractTutorial = 5,
  ExploreTutorial = 6,
}

export interface RoomSessionState {
  debug: RoomSessionDebugSettings
  sessionID: string
  photonSessionID: string
  preJoinedPhotonSessionID: string
  sessionStatus: RoomSessionStatus
  statusMsg: string
  retryingToJoin: boolean
  retryJoinAttempts: number
  joinContext: SpaceJoinContextState
  networkStrength: NetworkStrength
  roomID: string
  meetingID: string
  meetings: Meeting[]
  isHostInstance: boolean
  isAuthlessPrivateLobby: boolean
  localActorNumber: number
  masterActorNumber: number
  isMasterClient: boolean
  actors: { [key: number]: RoomSessionActor }
  actorsLookup: { [key: string]: number[] }
  localUserIsSetup: boolean
  isAuthlessInfoConfirmed: boolean
  localActorInitialized: boolean
  sessionDataSynced: boolean
  timeOfRoomSessionSynced: number
  syncRateMultiplier: number
  backpack: BackpackState
  shop: ShopState
  userSpaceState: UserSpaceState
  offlineMode: boolean
  inSession: boolean
  inRoom: boolean
  inRoomAndFullySynced: boolean
  inRoomAndFullyParticipating: boolean
  isLeaving: boolean
  leaveReason: LeaveRoomReason
  sync: RoomConnectionState
  sharedState: SharedRoomSessionState
  persistedStateIsDirty: boolean
  persistenceStatus: RoomPersistenceStatus
  initialDataLoadComplete: boolean
  lastDataLoadTime: string
  clientCanAutosaveRoom: boolean
  voice: VoiceState
  webcamEnabled: boolean
  screenshareEnabled: boolean
  shouldBeConnectedToRTC: boolean
  room: RoomData
  features: RoomFeature[]
  portalDestinationsData: PortalDestinationsDataState
  isRoomOwner: boolean
  isReadOnlyActor: boolean
  isRestrictedToViewOnly: boolean
  isMyPrivateLobby: boolean
  isMyLobby: boolean
  administratorToolsActive: boolean
  isAdministrator: boolean
  addContentEnabled: boolean
  editAdminContentEnabled: boolean
  changeEnvironmentEnabled: boolean
  mainDockEnabled: boolean
  subDockEnabled: boolean
  clearRoomEnabled: boolean
  saveRoomEnabled: boolean
  muteAnyoneEnabled: boolean
  participantChatDisabled: boolean
  editRoomNameEnabled: boolean
  downloadContentEnabled: boolean
  deleteContentEnabled: boolean
  saveAsTemplateEnabled: boolean
  loadTemplateEnabled: boolean
  sharePanelEnabled: boolean
  isChangeEnvironmentSettingAvailable: boolean
  customEnvironmentMeshTeleportAvailable: boolean
  sceneHasEmptyGalleryFrames: boolean
  isHideAllEmptyFramesAvailable: boolean
  isClearAllFramesAvailable: boolean
  speechCaptioningAvailable: boolean
  abuseSafeguardsEnabled: boolean
  mainWallEnabled: boolean
  userTeleportEnabled: boolean
  camera: CameraState
  cameraMovementEnabled: boolean
  inputOverride: InputOverrideState
  webglCursorMode: SpatialCursorMode
  userTools: UserToolsState
  selectedObject: SelectedObjectState
  uploadTargetFrameObjectID: number
  lightBoxTargetObjectID: number
  avatarMovementEnabled: boolean
  localAvatarObjectID: number
  lastRespawnPosition: [number, number, number]
  lastRespawnOrientation: [number, number, number, number]
  isInitialRespawnComplete: boolean
  dock: DockState
  contentBrowser: ContentBrowserState
  moderation: ModerationState
  arSession: ARSessionState
  itemPreview: ItemPreviewState
  settingsMenuVisible: boolean
  memoryUsageMenuOpen: boolean
  profileMenuOpen: boolean
  roomModalType: RoomModalType
  socialProfileMenu: SocialProfileMenuState
  creatorSocialProfile: SocialProfileState
  isChatOpen: boolean
  mobileJoystickActive: boolean
  mobileJoystickVisible: boolean
  shouldShowLoadingScreen: boolean
  questSystem: QuestSystemState
  sandbox: SandboxState
  localMuteOverrides: { [key: number]: boolean }
  localHideOverrides: { [key: number]: boolean }
  showAllAvatars: boolean
  avatarOverride: SessionLocalAvatarOverrideState
  avatarOverridePreview: SessionLocalAvatarOverrideState
  roomContentLoadingSet: number[]
  isInitialEnvironmentLoadFinalized: boolean
  isInitialRoomContentLoadComplete: boolean
  objectIDToDirectURLLookup: { [key: number]: string }
  localVideoPlayerStates: { [key: number]: LocalVideoPlayerState }
  debugStatistics: string
  debugRTCStatistics: string
  debugVoiceStatistics: string
  isCreatingSpace: boolean
}

export interface RoomSessionDebugSettings {
  localLogOverrideEnabled: boolean
  logLevelOverride: LogLevel
  logChannelFlagsOverride: LogChannel
  toolkitExternalErrorLogCount: number
}

export interface SpaceJoinContextState {
  method: RoomJoinMethod
}

export enum RoomJoinMethod {
  Unknown = 0,
  UserSelected = 1,
  UserCreatedNewRoom = 2,
  UserJumpedThroughPortal = 3,
  UserAutoJoinedLobby = 4,
  UserJoinedThroughDirectLink = 5,
  DeveloperTool = 6,
  BrowserNavigation = 7,
  UserSwitchedInstances = 8,
  ForAvatarCustomization = 9,
  AutoRejoinAfterAuthenticating = 12,
}

export interface Meeting {
  meetingID: string
  liveswitchToken: string
  meetingFeatures: string[]
  isHostInstance: boolean
  activeParticipants: Meeting_Participant[]
  maxParticipants: number
}

export interface Meeting_Participant {
  userID: string
  displayName: string
}

export interface RoomSessionActor {
  userID: string
  roomActorNumber: number
}

export interface BackpackState {
  isOpen: boolean
  isInitialized: boolean
  worldCurrencyID: string
  worldCurrencyName: string
  worldCurrencyThumbnail: string
  worldCurrencyBalance: number
  pendingWorldCurrencyBalanceUpdates: number[]
  hasNewItems: boolean
  items: { [key: string]: BackpackItemState }
  itemsEnabledState: { [key: string]: BackpackItemEnabledState }
  itemTypesEnabledState: { [key: number]: BackpackItemTypeEnabledState }
  worldItemContinuationToken: string
  universalItemContinuationToken: string
}

export interface BackpackItemState {
  externalID: string
  name: string
  description: string
  worldID: string
  worldName: string
  creatorID: string
  type: ItemType
  assetSKU: string
  scope: ItemScope
  consumable: boolean
  consumableDurationInSeconds: number
  consumableCoolDownInSeconds: number
  consumedAt: string
  amount: number
  stackable: boolean
  updatedAt: string
  createdAt: string
  defaultThumbnailURL: string
  customThumbnailURL: string
  assetDownloadURL: string
  thumbnailURL: string
  useButtonLabel: string
  isNew: boolean
  isEquipped: boolean
  enabled: boolean
  disabledMessage: string
}

export interface BackpackItemEnabledState {
  enabled: boolean
  disabledMessage: string
}

export interface BackpackItemTypeEnabledState {
  enabled: boolean
  disabledMessage: string
}

export interface ShopState {
  isOpen: boolean
  isInitialized: boolean
  items: { [key: string]: ShopItemState }
  itemsDisplayStatus: { [key: string]: ShopItemDisplayStatusState }
}

export interface ShopItemState {
  name: string
  description: string
  type: ItemType
  scope: ItemScope
  consumable: boolean
  stackable: boolean
  thumbnailURL: string
  owned: boolean
  ownedAmount: number
  worldPrice: ShopItemWorldPriceState
  purchaseStatus: ShopItemPurchaseStatusState
  hasWorldPrice: boolean
  hasSufficientFunds: boolean
  ctaButtonLabel: string
  enabled: boolean
  disabledMessage: string
  visible: boolean
}

export interface ShopItemWorldPriceState {
  currencyID: string
  currencyName: string
  customThumbnailUrl: string
  price: number
  quantity: number
}

export interface ShopItemPurchaseStatusState {
  status: ShopItemPurchaseStatus
  failedMessage: string
}

export enum ShopItemPurchaseStatus {
  None = 0,
  Purchasing = 1,
  Purchased = 2,
  PurchaseFailed = 3,
}

export interface ShopItemDisplayStatusState {
  enabled: boolean
  disabledMessage: string
  visible: boolean
}

export interface UserSpaceState {
  isLoaded: boolean
  questSystem: UserQuestSystemPersistedState
}

export interface UserQuestSystemPersistedState {
  quests: { [key: number]: UserQuestPersistedState }
}

export interface UserQuestPersistedState {
  status: QuestStatus
  tasks: { [key: number]: UserQuestTaskPersistedState }
}

export interface UserQuestTaskPersistedState {
  status: QuestStatus
}

export enum QuestStatus {
  None = 0,
  InProgress = 1,
  Completed = 2,
}

export interface RoomConnectionState {
  isConnected: boolean
  isConnectedAndSynced: boolean
}

export interface SharedRoomSessionState {
  dataVersion: number
  meetingStartTime: string
  settings: RoomSessionSettingsState
  environment: SharedEnvironmentState
  customEnvironment: CustomEnvironmentState
  syncedActors: number[]
  actorMetaData: { [key: number]: ActorMetaData }
  locations: { [key: number]: VoiceLocationGroupState }
  actorLocationLookup: { [key: number]: number }
  actorsBroadcastingVideo: number[]
  scene: SceneState
  loadingRoomTemplates: { [key: number]: RoomTemplateLoadState }
}

export interface RoomSessionSettingsState {
  environmentChangerID: string
  environment: VREnvironment
  environmentVariant: { [key: number]: number }
  useVariableSyncRate: boolean
  enableAutosave: boolean
  enableAudioAttenuation: boolean
  areEmptyGalleryFramesHidden: boolean
  disableTextureCompressionForEnvironment: boolean
  disableTextureCompressionForObjects: boolean
  disableTeleportation: boolean
  voiceProvider: VoiceProvider
  voiceAppID: string
  voiceLocationGroupingMethod: VoiceLocationGroupingMethod
}

export enum VREnvironment {
  MountainLounge = 0,
  BoardroomLounge = 1,
  BoardroomWithATable = 2,
  Abstract = 3,
  Auditorium = 4,
  Custom = 5,
  Outdoor = 6,
  None = 7,
  IsleGallery = 8,
  PublicLobby = 9,
  PrivateLobby = 10,
  ObsidianGallery = 11,
  NFT0001_Museo = 12,
  NFT0002_BozoIsland = 13,
  AeriesGallery = 14,
  Agora = 15,
  UnityPackage = 16,
}

export interface SharedEnvironmentState {
  type: SharedEnvironmentState_EnvironmentAssetType
  builtIn: SharedEnvironmentState_BuiltInEnvironmentState
  model: SharedEnvironmentState_ModelEnvironmentState
  unityPackage: SharedEnvironmentState_UnityPackageState
}

export interface SharedEnvironmentState_BuiltInEnvironmentState {
  type: VREnvironment
}

export interface SharedEnvironmentState_ModelEnvironmentState {}

export interface SharedEnvironmentState_UnityPackageState {
  url: string
  sceneInitialized: boolean
  sceneStateVersion: number
  outstandingSpatialEvents: { [key: number]: number[] }
  animators: { [key: number]: SharedEnvironmentState_UnityPackageState_AnimatorState }
}

export interface SharedEnvironmentState_UnityPackageState_AnimatorState {
  parameterTypes: { [key: string]: AnimatorControllerParameterType }
  floatParameters: { [key: string]: number }
  intParameters: { [key: string]: number }
  boolParameters: { [key: string]: boolean }
}

export enum AnimatorControllerParameterType {
  Float = 1,
  Int = 3,
  Bool = 4,
  Trigger = 9,
}

export enum SharedEnvironmentState_EnvironmentAssetType {
  NotSet = 0,
  BuiltIn = 1,
  Model = 2,
  UnityPackage = 3,
}

export interface CustomEnvironmentState {
  skyboxURL: string
  modelURL: string
  modelFilePermission: RoomFilePermission
  skyboxFilePermission: RoomFilePermission
  modelPivotMode: ModelPivotMode
  modelSizingMode: ModelSizingMode
  modelPosition: [number, number, number]
  modelRotation: [number, number, number, number]
  modelScale: [number, number, number]
  animationClipName: string
  animationStatus: ModelState_AnimationStatus
  animationStartTime: string
  meshTeleportEnabled: boolean
  customTransformSet: boolean
  modelsBeingSet: { [key: number]: number }
}

export enum RoomFilePermission {
  None = 0,
  RequestingPermission = 1,
  PermissionGranted = 2,
  RequestFailed = 3,
}

export enum ModelPivotMode {
  Default = 0,
  Centered = 1,
}

export enum ModelSizingMode {
  Default = 0,
  Constrained = 1,
}

export enum ModelState_AnimationStatus {
  None = 0,
  Playing = 1,
  Paused = 2,
}

export interface ActorMetaData {
  userID: string
  socialProfile: SocialProfileState
  isReadOnlyActor: boolean
  isAuthless: boolean
  isEditor: boolean
  platform: Platform
  deviceModel: SpatialDeviceModel
  clientVersion: string
  clientVersionChannel: string
  blockedUsers: string[]
  liveSwitchClientID: string
  photonVoiceActorNumber: number
  isMutedAtSource: boolean
  isTalking: boolean
  gpsLocation: [number, number]
  countryName: string
  countryCode: string
  regionName: string
  regionCode: string
  city: string
  locationOverride: number
  languageCode: string
  clientCanAutosaveRoom: boolean
}

export enum Platform {
  WebGL = 0,
  Standalone = 1,
  AndroidMobile = 2,
  iOSMobile = 3,
  Oculus = 4,
}

export enum SpatialDeviceModel {
  NotRecognized = 0,
  OculusQuest1 = 3,
  OculusQuest2 = 7,
  GooglePixel4 = 5,
}

export interface VoiceLocationGroupState {
  locationID: number
  gpsLocation: [number, number]
  countryName: string
  countryCode: string
  regionName: string
  regionCode: string
  city: string
  isCustomLocation: boolean
  actors: number[]
  actorsLastUpdatedTime: string
}

export interface SceneState {
  objects: { [key: number]: SceneObjectState }
  transforms: { [key: number]: SceneTransformState }
  layouts: { [key: number]: SceneLayoutState }
  layoutByItem: { [key: number]: SceneLayoutItemState }
  pinnedObjects: number[]
  images: { [key: number]: ImageState }
  galleryFrames: { [key: number]: GalleryFrameState }
  galleryPedestals: { [key: number]: GalleryPedestalState }
  galleryInfos: { [key: number]: GalleryInformationState }
  documents: { [key: number]: DocumentState }
  audioPlayers: { [key: number]: AudioPlayerState }
  videoPlayers: { [key: number]: VideoPlayerState }
  models: { [key: number]: ModelState }
  stickyNotes: { [key: number]: StickyNoteState }
  mirrors: { [key: number]: MirrorState }
  titles: { [key: number]: TitleState }
  scribbles: { [key: number]: ScribbleState }
  attachedScribbles: { [key: number]: number[] }
  thoughtflows: { [key: number]: ThoughtflowState }
  whiteboards: { [key: number]: WhiteboardState }
  webBrowsers: { [key: number]: SceneWebBrowserState }
  surfaces: { [key: number]: SurfaceState }
  mainWallObjectID: number
  selfieStick: { [key: number]: SelfieStickState }
  portals: { [key: number]: SpacePortalState }
  spawnPoints: { [key: number]: SpawnPointState }
  hyperlinks: { [key: number]: HyperlinkState }
  rigidbodies: { [key: number]: RigidbodyState }
  colliders: { [key: number]: ColliderState }
  prefabObjects: { [key: number]: PrefabObjectState }
  embeddedObjects: { [key: number]: EmbeddedObjectState }
  syncedVariables: { [key: number]: SyncedVariablesState }
  avatars: { [key: number]: AvatarState }
  rtcFeeds: { [key: number]: RTCFeedState }
  speechCaptions: { [key: number]: SpeechCaptionState }
}

export interface SceneObjectState {
  creatorActor: number
  creatorUserID: string
  createdTimestamp: string
  ownerActor: number
  ownershipMode: OwnershipMode
  flags: SceneObjectFlags
  viewPrefab: string
  uniqueID: string
}

export enum OwnershipMode {
  Takeover = 0,
  Fixed = 1,
}

export enum SceneObjectFlags {
  None = 0,
  SerializeWithScene = 1,
  DestroyOnOwnerDisconnect = 2,
  DestroyOnCreatorDisconnect = 4,
  UneditableSceneObject = 8,
  DoNotInstantiateForLocalActor = 16,
}

export interface SceneTransformState {
  localPosition: [number, number, number]
  localRotation: [number, number, number, number]
  localScale: [number, number, number]
}

export interface SceneLayoutState {
  items: { [key: number]: number }
}

export interface SceneLayoutItemState {
  layoutID: number
}

export interface ImageState {
  url: string
  aspectMode: PanelAspectMode
  filePermission: RoomFilePermission
}

export enum PanelAspectMode {
  None = 0,
  WidthControlsHeight = 1,
  HeightControlsWidth = 2,
  Fit = 3,
  Custom = 4,
  LegacyImagePanel = 5,
  FixedWidthCustom = 6,
  FixedHeightCustom = 7,
  RelativeAspectFit = 8,
}

export interface GalleryFrameState {
  style: FrameStyle
  isEmpty: boolean
  hasFrame: boolean
}

export enum FrameStyle {
  None = 1,
  Default = 0,
}

export interface GalleryPedestalState {}

export interface GalleryInformationState {
  creator: string
  description: string
  title: string
  isVisible: boolean
  isLightboxPanelVisible: boolean
}

export interface DocumentState {
  url: string
  pageUrls: string[]
  pageIndex: number
  useLegacyAspectMode: boolean
  filePermission: RoomFilePermission
}

export interface AudioPlayerState {
  url: string
  fileName: string
  isPlaying: boolean
  playerTime: number
  loop: boolean
  mute: boolean
  volume: number
  showVisualizer: boolean
  filePermission: RoomFilePermission
  timeReferencePoint: number
  isBeingScrubbed: boolean
}

export interface VideoPlayerState {
  url: string
  fileName: string
  isPlaying: boolean
  playerTime: number
  loop: boolean
  mute: boolean
  volume: number
  hideUI: boolean
  filePermission: RoomFilePermission
  timeReferencePoint: number
  isBeingScrubbed: boolean
  useLegacyAspectMode: boolean
}

export interface ModelState {
  url: string
  fileName: string
  pivotMode: ModelPivotMode
  sizingMode: ModelSizingMode
  constrainedSize: number
  filePermission: RoomFilePermission
  animationClipName: string
  animationStatus: ModelState_AnimationStatus
  animationStartTime: string
}

export interface StickyNoteState {
  text: string
  color: [number, number, number, number]
  textColor: [number, number, number, number]
}

export interface MirrorState {
  aspectRatio: number
  lookAtAvatarEnabled: boolean
}

export interface TitleState {
  text: string
  fontSize: number
}

export interface ScribbleState {
  lines: { [key: number]: ScribbleState_Line }
  attachedID: number
}

export interface ScribbleState_Line {
  points: ScribbleState_Line_Point[]
  color: [number, number, number, number]
  brushSize: number
}

export interface ScribbleState_Line_Point {
  position: [number, number, number]
  upVector: [number, number, number]
}

export interface ThoughtflowState {
  mode: ThoughtflowMode
  searchPhrase: string
  modelURLs: string[]
  imageURLs: string[]
  modelIndex: number
  showSpeechVisualization: boolean
  speechAmplitude: number
}

export enum ThoughtflowMode {
  None = 0,
  Editing = 1,
  Complete = 2,
}

export interface WhiteboardState {
  lines: WhiteboardState_Line[]
  pixelWidth: number
  pixelHeight: number
}

export interface WhiteboardState_Line {
  points: [number, number][]
  width: number
  color: [number, number, number, number]
}

export interface SceneWebBrowserState {
  url: string
  lastActorToInteract: number
}

export interface SurfaceState {
  type: SurfaceState_Type
  dimensions: [number, number]
}

export enum SurfaceState_Type {
  None = 0,
  Wall = 1,
}

export interface SelfieStickState {
  isFlipped: boolean
  zoomLevelNormalized: number
  interactionStatus: SelfieStickInteractionStatus
}

export enum SelfieStickInteractionStatus {
  Idle = 0,
  Ready = 1,
  Take = 2,
}

export interface SpacePortalState {
  actualDestinationRoomID: string
  actualDestinationIsHyperlink: boolean
  destinationRoomID: string
  destinationIsHyperlink: boolean
  defaultCubemapURL: string
}

export interface SpawnPointState {}

export interface HyperlinkState {
  linkHref: string
  linkLabel: string
}

export interface RigidbodyState {
  isKinematic: boolean
  velocity: [number, number, number]
  angularVelocity: [number, number, number]
  timeReferencePoint: number
  mass: number
  drag: number
  angularDrag: number
}

export interface ColliderState {
  type: ColliderType
  friction: number
  bounciness: number
}

export enum ColliderType {
  Default = 0,
  Mesh = 1,
  BoxApproximation = 2,
  BoundingSphere = 3,
}

export interface PrefabObjectState {
  url: string
  packageName: string
  filePermission: RoomFilePermission
}

export interface EmbeddedObjectState {
  sourceType: EmbeddedObjectSourceType
  packageURL: string
  instanceID: string
  assetID: string
  isEmbeddedInScene: boolean
  parentObjectID: number
}

export enum EmbeddedObjectSourceType {
  UnitySDKEnvironment = 0,
  UnitySDKPrefab = 1,
}

export interface SyncedVariablesState {
  variablesInitialized: boolean
  variables: { [key: number]: SyncedVariable }
}

export interface SyncedVariable {
  name: string
  type: SyncedVariableType
  shouldSerialize: boolean
  asInt: number
  asBool: boolean
  asFloat: number
  asVec2: [number, number]
  asVec3: [number, number, number]
  asString: string
}

export enum SyncedVariableType {
  Unknown = 0,
  Int = 1,
  Bool = 2,
  Float = 3,
  Vector2 = 4,
  Vector3 = 5,
  String = 6,
}

export interface AvatarState {
  displayName: string
  nametagSubtext: string
  nametagBarValue: number
  nametagBarVisible: boolean
  avatarSDKAvatarID: string
  body: string
  skinColorOverride: [number, number, number, number]
  shirtColorOverride: [number, number, number, number]
  lookatLocalTarget: [number, number, number]
  leftHand: AvatarHandState
  rightHand: AvatarHandState
  animationPath: string
  isAnimationImmediately: boolean
  isCameraMode: boolean
  isSitting: boolean
  isClimbing: boolean
  lastClimbToTopTime: number
  lookOffset: [number, number, number]
  poseOffset: [number, number, number]
  lastJumpTime: number
  jumpReleased: boolean
  lastEmoteTime: number
  parentPath: string
  movementData: AvatarMovementData
  spawnInitialized: boolean
  control: AvatarControlState
  attachmentURLs: string[]
}

export interface AvatarHandState {
  isTracking: boolean
  position: [number, number, number]
  orientation: [number, number, number, number]
  jointCompressionMethod: string
  jointData: number[]
}

export interface AvatarControlState {
  walkSpeed: number
  runSpeed: number
  jumpHeight: number
  gravityMultiplier: number
  fallingGravityMultiplier: number
  useVariableHeightJump: boolean
  maxJumpCount: number
}

export interface RTCFeedState {
  clientID: string
  feedID: string
  label: string
  mcuSubClientID: string
  mute: boolean
  volume: number
  hideUI: boolean
}

export interface SpeechCaptionState {
  previousPhrase: SpeechCaptionState_Phrase
  currentPhrase: SpeechCaptionState_Phrase
  speakerActorNumber: number
}

export interface SpeechCaptionState_Phrase {
  text: string
  timestamp: number
  languageCode: string
  translations: { [key: string]: string }
}

export interface RoomTemplateLoadState {
  loadingActor: number
  templateURL: string
  templateObjectIDs: number[]
}

export interface VoiceState {
  activeProvider: VoiceProvider
  isConnected: boolean
  shouldBeConnected: boolean
  userEnabledVoiceConnection: boolean
  transmissionEnabled: boolean
  isMuted: boolean
  isTalking: boolean
  listeningToActors: number[]
  transmissionActive: boolean
  photon: PhotonVoiceState
  liveSwitch: LiveSwitchVoiceState
}

export interface PhotonVoiceState {
  appID: string
  connectionStatus: ClientState
  localVoiceActorNumber: number
  masterVoiceActorNumber: number
  actors: { [key: number]: PhotonVoiceActorState }
  isWebReadyForConnection: boolean
}

export interface PhotonVoiceActorState {
  roomActorNumber: number
}

export enum ClientState {
  PeerCreated = 0,
  Authenticating = 1,
  Authenticated = 2,
  JoiningLobby = 3,
  JoinedLobby = 4,
  DisconnectingFromMasterServer = 5,
  DisconnectingFromMasterserver = 5,
  ConnectingToGameServer = 6,
  ConnectingToGameserver = 6,
  ConnectedToGameServer = 7,
  ConnectedToGameserver = 7,
  Joining = 8,
  Joined = 9,
  Leaving = 10,
  DisconnectingFromGameServer = 11,
  DisconnectingFromGameserver = 11,
  ConnectingToMasterServer = 12,
  ConnectingToMasterserver = 12,
  Disconnecting = 13,
  Disconnected = 14,
  ConnectedToMasterServer = 15,
  ConnectedToMasterserver = 15,
  ConnectedToMaster = 15,
  ConnectingToNameServer = 16,
  ConnectedToNameServer = 17,
  DisconnectingFromNameServer = 18,
  ConnectWithFallbackProtocol = 19,
}

export interface LiveSwitchVoiceState {
  listeningToClients: string[]
}

export interface PortalDestinationsDataState {
  deletedDestinations: string[]
  destinations: { [key: string]: RoomData }
}

export interface CameraState {
  mode: CameraMode
  rotationMode: CameraRotationMode
  isFirstPerson: boolean
  autoplayTargetObjectID: number
  autoplayProgress: number
  autoplayIndex: number
  autoplayAvailableCount: number
  isOrbitCamera: boolean
  isStrafing: boolean
  platformOffset: [number, number, number]
}

export enum CameraMode {
  Room = 0,
  Vehicle = 1,
  AR = 2,
  ArtNavigation = 3,
  AutoPlay = 4,
  AvatarCustomization = 5,
  Filming = 6,
  BackpackItemPreview = 7,
  ShopItemPreview = 8,
}

export enum CameraRotationMode {
  AutoRotate = 0,
  PointerLock = 1,
  DragToRotate = 2,
}

export interface InputOverrideState {
  flags: InputOverrideFlags
}

export enum InputOverrideFlags {
  None = 0,
  Movement = 1,
  Jump = 2,
  Sprint = 4,
  ActionButton = 8,
}

export interface UserToolsState {
  targetObjectID: number
  activeTool: UserTool
  manipulatingObjectIDs: number[]
  stickyNote: StickyNoteToolState
  scribble: ScribbleToolState
  thoughtflow: ThoughtflowToolState
  whiteboard: WhiteboardToolState
  webBrowser: WebBrowserToolState
  assetSharingTool: AssetSharingToolState
  customEnvironmentTool: CustomEnvironmentToolState
  spacePortalToolState: SpacePortalToolState
  useTransformGizmos: boolean
}

export interface StickyNoteToolState {
  mode: StickyNoteToolState_Mode
}

export enum StickyNoteToolState_Mode {
  None = 0,
  Keyboard = 1,
  Dictation = 2,
  Whiteboarding = 3,
}

export interface ScribbleToolState {
  lineID: number
  color: [number, number, number, number]
  brushSize: number
}

export interface ThoughtflowToolState {
  mode: ThoughtflowToolState_Mode
}

export enum ThoughtflowToolState_Mode {
  None = 0,
  Keyboard = 1,
  Dictation = 2,
  DictationFromGesture = 3,
}

export interface WhiteboardToolState {
  brushColor: [number, number, number, number]
  brushSize: number
  inDrawZone: boolean
  hand: Handedness
  position: [number, number, number]
  orientation: [number, number, number, number]
}

export enum Handedness {
  None = 0,
  Left = 1,
  Right = 2,
  Both = 3,
  Other = 4,
  Any = 7,
}

export interface WebBrowserToolState {
  mode: WebBrowserToolState_Mode
}

export enum WebBrowserToolState_Mode {
  Keyboard = 0,
  Dictation = 1,
}

export interface AssetSharingToolState {
  assetURL: string
}

export interface CustomEnvironmentToolState {
  currentStep: CustomEnvironmentSetupStep
  hideUI: boolean
  deleteModelIfCanceled: boolean
  usePreviousEnvTransform: boolean
}

export enum CustomEnvironmentSetupStep {
  None = 0,
  ConfirmModel = 1,
  MiniatureModelSetup = 2,
  FullScaleSetup = 3,
  SetCustomEnvironment = 4,
  SetCustomSkybox = 5,
  Instructions = 6,
  WebFullScaleSetup = 7,
}

export interface SpacePortalToolState {
  searchTerm: string
  category: RoomsMenuCategory
}

export enum UserTool {
  None = 0,
  StickyNote = 1,
  Scribble = 2,
  Thoughtflow = 3,
  WebBrowser = 4,
  AssetSharingTool = 5,
  CustomEnvironment = 6,
  SpacePortal = 7,
}

export interface SelectedObjectState {
  objectID: number
  transformManipulationMode: SpatialManipulationHandler_TwoHandedManipulation
  inspector: ObjectInspectorState
}

export interface ObjectInspectorState {
  components: InspectorComponent[]
}

export interface InspectorComponent {
  path: string
  label: string
  fields: InspectorField[]
}

export interface InspectorField {
  path: string
  label: string
  type: string
  tooltip: string
  isReadOnly: boolean
  enumKeys: string[]
  enumValues: number[]
}

export enum SpatialManipulationHandler_TwoHandedManipulation {
  None = 0,
  Move = 1,
  Rotate = 2,
  Scale = 4,
  MoveRotate = 3,
  MoveScale = 5,
  RotateScale = 6,
  MoveRotateScale = 7,
}

export interface DockState {
  mode: DockMode
  subDockMenu: SubDockMenu
  mobileTopPosition: number
}

export enum DockMode {
  Minimized = 0,
  MainDock = 1,
  Hidden = 2,
}

export enum SubDockMenu {
  None = 0,
  Leave = 1,
  Participants = 2,
  Invite = 3,
}

export interface ContentBrowserState {
  mode: ContentBrowserMode
  selectedIntegration: IntegrationType
  scrollPosition: number
}

export enum ContentBrowserMode {
  Closed = 0,
  RecentContentList = 1,
  IntegrationContentList = 2,
  IntegrationInstructions = 3,
}

export interface ModerationState {
  targetUserID: string
  bannedUsers: { [key: string]: RoomBannedUserState }
  bannedModal: BannedModalState
}

export interface RoomBannedUserState {
  userID: string
  displayName: string
  profilePicURL: string
  bannedUntilUnixMillis: number
}

export interface BannedModalState {
  visible: boolean
  bannedUntilUnixMillis: number
}

export interface ARSessionState {
  worldAnchoringStatus: ARWorldAnchoringStatus
  isEnvironmentMeshingEnabled: boolean
}

export enum ARWorldAnchoringStatus {
  None = 0,
  SelectingWall = 1,
  AdjustingAnchor = 2,
  Done = 3,
}

export interface ItemPreviewState {
  itemID: string
  isLoading: boolean
}

export interface SocialProfileMenuState {
  menuVisible: boolean
  profilePageVisible: boolean
  profileFollowPanelVisibility: SocialProfileMenuState_FollowPanelVisibility
  selectedUserID: string
  selectedUserIsAuthless: boolean
  profile: SocialProfileState
  profileLoadStatus: SocialProfileMenuState_LoadStatus
  followers: SocialProfileMenuState_FollowEntry[]
  followings: SocialProfileMenuState_FollowEntry[]
  followersLoadStatus: SocialProfileMenuState_LoadStatus
  followingsLoadStatus: SocialProfileMenuState_LoadStatus
  followersListIsComplete: boolean
  followingsListIsComplete: boolean
  spaces: RoomData[]
  spacesLoadStatus: SocialProfileMenuState_LoadStatus
}

export interface SocialProfileMenuState_FollowEntry {
  userID: string
  displayName: string
  profilePictureURL: string
}

export enum SocialProfileMenuState_FollowPanelVisibility {
  Hidden = 0,
  Followers = 1,
  Followings = 2,
}

export enum SocialProfileMenuState_LoadStatus {
  Idle = 0,
  Loading = 1,
  Complete = 2,
  Failed = 3,
}

export interface QuestSystemState {
  isReady: boolean
  isLoaded: boolean
  isInitializedFromUserSpaceState: boolean
  currentQuestID: number
  quests: { [key: number]: QuestState }
}

export interface QuestState {
  name: string
  description: string
  status: QuestStatus
  startAutomatically: boolean
  tasksAreOrdered: boolean
  saveUserProgress: boolean
  tasks: QuestTaskState[]
  rewards: QuestRewardState[]
  taskIDtoIndex: { [key: number]: number }
  currentTaskID: number
}

export interface QuestTaskState {
  id: number
  name: string
  type: SpatialQuest_TaskType
  progressSteps: number
  progress: number
  status: QuestStatus
}

export enum SpatialQuest_TaskType {
  Check = 0,
  ProgressBar = 1,
}

export interface QuestRewardState {
  type: SpatialQuest_RewardType
  id: string
}

export enum SpatialQuest_RewardType {
  Badge = 0,
  Item = 1,
}

export interface SandboxState {
  isMine: boolean
  type: PackageType
  bundleURL: string
}

export enum PackageType {
  Space = 4,
  SpaceTemplate = 0,
  Avatar = 1,
  AvatarAnimation = 2,
  PrefabObject = 3,
  AvatarAttachment = 5,
}

export interface SessionLocalAvatarOverrideState {
  type: AvatarOverrideType
  avatarStyle: UserAvatarStyle
  bodyURL: string
  attachments: { [key: number]: AvatarAttachmentState }
}

export enum AvatarOverrideType {
  Disabled = 0,
  Sandbox = 1,
  VisualScripting = 2,
  World = 3,
  Other = 4,
}

export interface LocalVideoPlayerState {
  isVisible: boolean
  isAudible: boolean
}

export enum RoomSessionStatus {
  NotConnected = 0,
  SessionSetup = 1,
  RequestingToJoin = 2,
  Joining = 3,
  Joined = 4,
  JoinFailed = 5,
  Timeout = 6,
  Leaving = 7,
}

export enum NetworkStrength {
  Strong = 0,
  Moderate = 1,
  Weak = 2,
}

export enum LeaveRoomReason {
  NotSet = 0,
  UserAction = 1,
  JoinError = 2,
  UnexpectedError = 3,
  LoggedOut = 4,
  AccessLost = 5,
  Kicked = 6,
  Banned = 7,
  Closed = 8,
  NoLongerExists = 9,
  Inactivity = 10,
  FailedToLoad = 11,
  InitialSyncFailed = 12,
  JoiningNewSpace = 13,
  WebRoomContainerUnmount = 14,
  AuthlessUserLoggingIn = 15,
}

export enum RoomPersistenceStatus {
  None = 0,
  LoadRequested = 1,
  Loading = 2,
  LoadFailed = 3,
  LoadComplete = 4,
  SaveRequested = 5,
  Saving = 6,
  SaveFailed = 7,
  SaveComplete = 8,
}

export enum RoomFeature {
  None = 0,
  RoomAdminTools = 1,
  OrgAdminsAsHosts = 2,
  DisableSaveRoom = 3,
  DisableClearRoom = 4,
  DisableCreateContent = 5,
  DisableDeleteContent = 6,
  DisableMainDock = 7,
  DisableSubDock = 8,
  DisableChangeEnvironment = 9,
  DisableSaveAsTemplate = 10,
  EnableAbuseSafeguards = 11,
  HideMainWall = 12,
  DisableLoadingTemplates = 13,
  EnableSpeechCaptioning = 14,
}

export enum SpatialCursorMode {
  HoverOnNothing = 0,
  HoverOnObject = 1,
  PanClickDown = 2,
  HoverOnLink = 3,
  HoverOnArt = 4,
}

export enum RoomModalType {
  None = 0,
  CommunityGuidelines = 1,
  ShareToSocials = 2,
}

export interface LocationDataState {
  gpsLocation: [number, number]
  countryName: string
  countryCode: string
  regionName: string
  regionCode: string
  city: string
}

export interface RTCState {
  token: string
  clientID: string
  channelID: string
  channelClaimed: boolean
  channelConnectionStatus: RTCConnectionStatus
  localMedias: { [key: string]: LocalMediaState }
  remoteClients: { [key: string]: RemoteClientState }
  voiceUpstreamStats: VoiceUpstreamStats
  mcuLayout: { [key: string]: [number, number, number, number] }
}

export interface LocalMediaState {
  mediaType: string
  sfuConnectionClaimed: boolean
  sfuConnectionStatus: RTCConnectionStatus
}

export enum RTCConnectionStatus {
  Disconnected = 0,
  Connecting = 1,
  Connected = 2,
  Disconnecting = 3,
  Failed = 4,
}

export interface RemoteClientState {
  connectedToChannel: boolean
  userID: string
  feeds: { [key: string]: FeedState }
  voiceStream: VoiceStreamState
}

export interface FeedState {
  started: boolean
  connectionStatus: RTCConnectionStatus
  feedType: string
  connectionMode: string
  width: number
  height: number
  frameRate: number
  drawRegion: [number, number, number, number]
}

export interface VoiceStreamState {
  streamID: string
  stats: VoiceDownstreamStats
}

export interface VoiceDownstreamStats {
  prevFramesReceived: number
  prevBytesReceived: number
  totalFramesReceived: number
  totalBytesReceived: number
  streamBufferLatency: number
}

export interface VoiceUpstreamStats {
  prevFramesSent: number
  prevBytesSent: number
  totalFramesSent: number
  totalBytesSent: number
}

export interface CastState {
  captureIP: string
  captureClientID: string
  captureUserID: string
  lastViewPosition: [number, number, number]
  lastViewRotation: [number, number, number, number]
  lastViewScale: [number, number, number]
}

export interface VREnvironmentState {
  type: VREnvironment
  loadStatus: EnvironmentLoadStatus
  loadProgress: number
  builtInLoadStatus: EnvironmentLoadStatus
  customEnvironmentModelLoadStatus: EnvironmentLoadStatus
  customEnvironmentSkyboxModelLoadStatus: EnvironmentLoadStatus
  unityPackageLoadStatus: EnvironmentLoadStatus
  customNFTEnvironmentID: string
  customNFTEnvironmentOptions: { [key: string]: CustomNFTEnvironmentState }
  isEnvironmentLoaded: boolean
  ableToSwitchEnvironment: boolean
  mainSurfaceBounds: UnityBounds
  mainSurfaceAngle: number
  mainSurfaceVisible: boolean
  mainSurfaceDotsVisible: boolean
  teleportHotSpots: TeleportHotSpotState[]
  lastTeleportHotspot: TeleportHotSpotState
  thumbnailCameraPosition: [number, number, number]
  thumbnailCameraRotation: [number, number, number, number]
  thumbnailCameraFOV: number
  enableFog: boolean
  disableTeleport: boolean
  localAvatarMovingSpeed: number
  localAvatarRunSpeed: number
  localAvatarJumpHeight: number
  localAvatarGravityMultiplier: number
  localAvatarFallingGravityMultiplier: number
  localAvatarUseVariableHeightJump: boolean
  localAvatarMaxJumpCount: number
}

export interface CustomNFTEnvironmentState {
  name: string
  creatorName: string
  thumbnailURL: string
  storeURL: string
  chain: string
  contractAddress: string
  tokenID: string
  unityPackageURL: string
  presetURL: string
  modelURL: string
  skyboxURL: string
  position: [number, number, number]
  rotation: [number, number, number, number]
  scale: [number, number, number]
}

export interface TeleportHotSpotState {
  position: [number, number, number]
  sitPosition: [number, number, number]
  rotation: [number, number, number, number]
  overrideOrientation: boolean
}

export enum EnvironmentLoadStatus {
  Idle = 0,
  Loading = 1,
  Complete = 2,
  Failed = 3,
}

export interface SpeechCaptionConfigState {
  enabled: boolean
  languageCode: string
  availableLanguages: SpeechCaptionConfigState_SpeechCaptionLanguageState[]
}

export interface SpeechCaptionConfigState_SpeechCaptionLanguageState {
  code: string
  displayName: string
}

export interface MicrophoneState {
  status: MicStatus
  shouldRecord: boolean
  source: string
  gain: number
  avgAmplitude: number
  peakAmplitude: number
}

export enum MicStatus {
  Unknown = 0,
  On = 1,
  Off = 2,
  RequestingPermissions = 3,
  Muted = 4,
  NoDevicesAvailable = 5,
  InvalidChannels = 6,
  AbortError = 7,
  NotAllowedError = 8,
  NotFoundError = 9,
  NotReadableError = 10,
  OverconstrainedError = 11,
  SecurityError = 12,
  TypeError = 13,
  SessionInterrupted = 14,
  Exception = 15,
}

export interface CameraViewportState {
  rect: [number, number, number, number]
  animation: CameraViewportState_AnimationState
}

export interface CameraViewportState_AnimationState {
  targetRect: [number, number, number, number]
  duration: number
  curveType: EasingFunctions_EaseFunc
}

export enum EasingFunctions_EaseFunc {
  EaseInQuad = 0,
  EaseOutQuad = 1,
  EaseInOutQuad = 2,
  EaseInCubic = 3,
  EaseOutCubic = 4,
  EaseInOutCubic = 5,
  EaseInQuart = 6,
  EaseOutQuart = 7,
  EaseInOutQuart = 8,
  EaseInQuint = 9,
  EaseOutQuint = 10,
  EaseInOutQuint = 11,
  EaseInSine = 12,
  EaseOutSine = 13,
  EaseInOutSine = 14,
  EaseInExpo = 15,
  EaseOutExpo = 16,
  EaseInOutExpo = 17,
  EaseInCirc = 18,
  EaseOutCirc = 19,
  EaseInOutCirc = 20,
  Linear = 21,
  Spring = 22,
  EaseInBounce = 23,
  EaseOutBounce = 24,
  EaseInOutBounce = 25,
  EaseInBack = 26,
  EaseOutBack = 27,
  EaseInOutBack = 28,
  EaseInElastic = 29,
  EaseOutElastic = 30,
  EaseInOutElastic = 31,
}

export enum AppUpdateAvailability {
  Unknown = 0,
  UpToDate = 1,
  UpdateAvailable = 2,
  UpdateRequired = 3,
}

export enum AppBootStatus {
  Booting = 0,
  WaitingForInitialConnectivityTest = 1,
  Bootstrap = 2,
  DisplayingStartupMessage = 3,
  DismissedStartupMessage = 4,
  MainSystemsInitialized = 5,
  Complete = 6,
}

export enum SAPIStatus {
  Unknown = 0,
  Reachable = 1,
  Unreachable = 2,
}

export enum LoginStatus {
  LoggedOut = 0,
  TokenExpired = 1,
  LoggingIn = 2,
  LoggedIn = 3,
  LoginFailed = 4,
  LoggingOut = 5,
}

export enum LoginMethod {
  Code = 0,
  History = 1,
  AccessToken = 2,
}

export enum AppIntroStatus {
  Waiting = 0,
  Animating = 1,
  Finished = 2,
}

export enum ScreenOrientation {
  Unknown = 0,
  Landscape = 3,
  Portrait = 1,
  PortraitUpsideDown = 2,
  LandscapeLeft = 3,
  LandscapeRight = 4,
  AutoRotation = 5,
}

export enum RequestAlertToReactType {
  UnmuteRequest = 1,
  EnterPortal = 2,
  ConfirmPortalPermissions = 3,
  NFTEnvironmentFallback = 4,
  ChangeEnvironmentFromContentMenu = 5,
  SpawnTemplate = 6,
  NavigateWithHyperlink = 7,
  ErrorEditingProfile = 8,
}

export enum InputManager_InputMethod {
  Click = 0,
  Keypress = 1,
}

export interface UnityBounds {
  center: [number, number, number]
  size: [number, number, number]
}

export interface AvatarMovementData {
  parentPathHash: number
  position: [number, number, number]
  quaternion: [number, number, number, number]
  velocity: [number, number, number]
}
