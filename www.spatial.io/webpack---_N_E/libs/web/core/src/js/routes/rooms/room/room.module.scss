@use "theme/src/colors";
@use "theme/src/layout";
@use "theme/src/screens";
@use "theme/src/text";
@use "theme/src/shadows";
@use "theme/src/util";
@use "web/core/src/js/routes/rooms/variables.module.scss" as Room;
@use "web/core/src/js/components/chat/variables.module.scss" as chatVariables;
@use "web/core/src/js/components/circle-button/variables.module" as circleButtonVariables;

$grid-area-lower: lower;

.content {
  width: 100%;
  height: 100%;
  display: grid;
  // must use minmax(0, 1fr) instead of 1fr
  // see https://stackoverflow.com/questions/52861086/why-does-minmax0-1fr-work-for-long-elements-while-1fr-doesnt
  grid-template-rows: auto minmax(0, 1fr);
  // Period used as a spacer in defining grid areas:
  // https://css-tricks.com/snippets/css/complete-guide-grid/#aa-grid-template-areas.
  grid-template-areas: "." "#{$grid-area-lower}";
  pointer-events: none !important;
  transition: opacity 300ms var(--emo-out);
  overflow: hidden;
}

.settingsMenu {
  li {
    & > button,
    & > a {
      width: 100%;
      white-space: nowrap;
    }
  }
}

.settingsMenuContent {
  max-height: 75vh;
  overflow-y: auto;
}

.galleryTutorialContainer {
  max-width: 200px;
}

.hostToolsModalBody {
  max-height: 90vh;
  overflow-y: auto;
}

.manageHostsModalBody {
  max-height: 90vh;
  width: 580px;
  padding-left: 40px;
  padding-right: 40px;
  display: flex;
  flex-direction: column;
}

.controlBar {
  display: grid;
  grid-template-columns: 1fr auto 1fr;
  width: 100%;
  padding: Room.$padding-vertical Room.$padding-horizontal;
  pointer-events: none !important;
}

.topBar {
  z-index: Room.$z-index-chat + 1; // ensures the room settings menu displays above chat
  padding-bottom: 0;
  grid-template-areas: "#{Room.$top-bar-grid-area-leave-button} #{Room.$top-bar-grid-area-top-dock} #{Room.$top-bar-grid-area-top-right-container}";

  .leaveButton {
    grid-area: Room.$top-bar-grid-area-leave-button;
    font-size: text.rem(14px);
  }

  .topDockContainer {
    grid-area: Room.$top-bar-grid-area-top-dock;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .topRightContainer {
    grid-area: Room.$top-bar-grid-area-top-right-container;
    display: grid;
    grid-auto-flow: column;
    gap: 16px;
    height: circleButtonVariables.$size;
    justify-self: flex-end;
    align-items: center;
  }
}

.lowerSection {
  padding-top: 12px;
  grid-template-rows: 100%;
  grid-template-areas: "#{Room.$bottom-bar-grid-area-bottom-left} #{Room.$bottom-bar-grid-area-main-dock} #{Room.$bottom-bar-grid-area-settings} #{Room.$bottom-bar-grid-area-bottom-right}";
  max-height: 100%;
  grid-area: $grid-area-lower;

  .mainDock {
    grid-area: Room.$bottom-bar-grid-area-main-dock;
    align-self: flex-end;

    display: grid;
    gap: 16px;
    justify-items: center;
    z-index: Room.$z-index-bottom-section;
  }

  .bottomRightContainer {
    pointer-events: none;
    grid-area: Room.$bottom-bar-grid-area-settings;
    width: fit-content;
    justify-self: flex-end;
    display: grid;
    grid-auto-flow: column;
    grid-template-rows: minmax(0, 1fr);
    gap: 16px;
    align-items: flex-end;
    z-index: Room.$z-index-chat;
    margin-inline-start: 16px;

    &.displayAboveModals {
      z-index: layout.$modal-z-index + 1;
    }
  }
}

.chatContainer {
  pointer-events: none;
  display: flex;
  max-height: 100%;
}

.backButton {
  position: absolute;
  left: 12px;
  top: 12px;
  color: colors.$black;
}

.roomModalBaseCloseBtn {
  position: absolute;
  top: 12px;
  right: 12px;
}

.cameraModeModalBody {
  width: 95vh;
  max-width: 800px;
  color: colors.$almost-black;
}

.tokenGateWelcomeTitle {
  font-size: text.rem(36px);
  font-weight: text.$real-head-demibold;
  padding: 12px;
}

.tokenGateWelcomeText {
  font-size: text.rem(16px);
}
.profileModal {
  padding: 0px;
}

.backpackDrawerBackground {
  background: linear-gradient(270deg, rgba(0, 0, 0, 0.5) 8.06%, rgba(0, 0, 0, 0) 100%);
}

.shopDrawerBackground {
  background: linear-gradient(90deg, rgba(0, 0, 0, 0.5) 8.06%, rgba(0, 0, 0, 0) 100%);
}

.customScrollbar {
  @include util.scrollbars();

  // Chrome
  // custom scrollbar always visible but we want it to be hidden by default and only visible on hover the container
  // the following code could be removed if we are okay with the scrollbar always being visible on Chrome (which is not the case on Firefox)
  &::-webkit-scrollbar-thumb {
    background-color: transparent;
  }
  &:hover,
  &:focus {
    &::-webkit-scrollbar-thumb {
      background-color: colors.$light-gray-on-white;
    }
  }
}
